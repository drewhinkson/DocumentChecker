name: Update Document and Create PR

on:
  workflow_dispatch:
    inputs:
      path:
        required: true
        description: 'Relative file path of the document to update from the repository root'
      title:
        required: true
        description: 'Title of the document'

jobs:
  update-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Display file content before changes
        run: cat .docs/${{ github.event.inputs.path }}
    
      - name: Update Document
        run: |
          DATE=$(date +%Y-%m-%d)
          sed -i "s/last_reviewed_on:.*/last_reviewed_on: $DATE/" .docs/${{ github.event.inputs.path }}

      - name: Display file content after changes
        run: cat .docs/${{ github.event.inputs.path }}

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .docs/${{ github.event.inputs.path }}
          git commit -m "Updated review date for ${{ github.event.inputs.title }}" || echo "No changes to commit."

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          branch: "update-${{ github.run_id }}"
          commit-message: "Update review date for ${{ github.event.inputs.title }}"
          title: "Review Update: ${{ github.event.inputs.title }}"
          body: "This PR updates the last reviewed date for the document."
          delete-branch: true
          draft: false

      
      - name: Wait for PR to become mergeable
        run: |
         ATTEMPTS=0
          MAX_ATTEMPTS=10
          while : ; do
            PR_STATE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/drewhinksonn/DocumentChecker/pulls/10" | jq -r '.mergeable_state')
            echo "Mergeable state: $PR_STATE"
            if [[ "$PR_STATE" == "clean" ]]; then
            echo "PR is ready to be merged."
            break
            fi
          if [[ "$ATTEMPTS" -ge "$MAX_ATTEMPTS" ]]; then
            echo "Maximum attempts reached, PR may not be mergeable."
            break
            fi
          sleep 30  # Wait for 30 seconds before trying again
          ((ATTEMPTS++))
          done


      - name: Auto Merge
        uses: pascalgn/automerge-action@v0.14.3
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
